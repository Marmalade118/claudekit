name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate JSON files
      run: |
        # Check all JSON files are valid
        find . -name "*.json" -type f -exec jq . {} \; > /dev/null
        echo "‚úÖ All JSON files are valid"
    
    - name: Check file permissions
      run: |
        # Ensure all shell scripts are executable
        find . -name "*.sh" -type f ! -perm -111 -exec echo "‚ùå Not executable: {}" \; -exec false {} +
        echo "‚úÖ All shell scripts are executable"
    
    - name: Check for sensitive data
      run: |
        # Basic check for common sensitive patterns
        if grep -r -E "(api_key|password|secret|token).*=.*['\"][^'\"]+['\"]" --include="*.sh" --include="*.md" .; then
          echo "‚ùå Potential sensitive data found"
          exit 1
        fi
        echo "‚úÖ No obvious sensitive data found"

  documentation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation consistency
      run: |
        # Ensure all hooks have documentation
        for hook in .claude/hooks/*.sh; do
          hook_name=$(basename "$hook" .sh)
          if ! grep -q "$hook_name" docs/hooks-documentation.md; then
            echo "‚ùå Missing documentation for $hook_name"
            exit 1
          fi
        done
        echo "‚úÖ All hooks are documented"
    
    - name: Check command documentation
      run: |
        # Ensure all commands have documentation
        for cmd in .claude/commands/*.md; do
          if [[ -f "$cmd" ]]; then
            cmd_name=$(basename "$cmd" .md)
            # Check if command has proper frontmatter
            if ! grep -q "^description:" "$cmd"; then
              echo "‚ùå Missing description in $cmd_name"
              exit 1
            fi
          fi
        done
        echo "‚úÖ All commands have descriptions"

  symlinks:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Validate symlinks
      run: |
        # Check that all symlinks are valid
        echo "üîç Validating symlinks..."
        invalid_links=0
        
        # Find all symlinks and check if they point to existing files
        find . -type l | while read -r link; do
          if [ -L "$link" ]; then
            target=$(readlink "$link")
            # Convert relative path to absolute for checking
            if [ "${target#/}" = "$target" ]; then
              # Relative path - resolve it relative to the symlink's directory
              link_dir=$(dirname "$link")
              target="$link_dir/$target"
            fi
            
            if [ ! -e "$target" ]; then
              echo "‚ùå Broken symlink: $link -> $target"
              invalid_links=$((invalid_links + 1))
            else
              echo "‚úÖ Valid symlink: $link -> $target"
            fi
          fi
        done
        
        # Check for broken symlinks with find
        if find . -type l ! -exec test -e {} \; -print | head -1 | grep -q .; then
          echo "‚ùå Found broken symlinks"
          find . -type l ! -exec test -e {} \; -print
          exit 1
        fi
        
        echo "‚úÖ All symlinks are valid"
    
    - name: Validate command structure
      run: |
        # Ensure all commands in .claude/commands/ can be accessed
        echo "üîç Validating command file access..."
        
        for cmd_file in .claude/commands/**/*.md; do
          if [[ -f "$cmd_file" ]] || [[ -L "$cmd_file" ]]; then
            if [[ ! -r "$cmd_file" ]]; then
              echo "‚ùå Cannot read command file: $cmd_file"
              exit 1
            fi
            
            # Check that the file has content
            if [[ ! -s "$cmd_file" ]]; then
              echo "‚ùå Empty command file: $cmd_file"
              exit 1
            fi
            
            echo "‚úÖ Command file accessible: $cmd_file"
          fi
        done
        
        echo "‚úÖ All command files are accessible"