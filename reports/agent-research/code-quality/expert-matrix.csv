Category,Symptom/Error,Root Cause,Fix 1,Fix 2,Fix 3,Diagnostic Command,Validation Step,Official Link
Linting & Static Analysis,Error: Cannot find module 'eslint-config-*',Missing or incompatible ESLint configuration package,Install the specific config package: npm install --save-dev eslint-config-airbnb,Create shareable config or use exact version matching,Implement team-wide ESLint config management with package-lock file,"npx eslint --print-config file.js | grep extends",Check if config resolves correctly,"https://eslint.org/docs/latest/user-guide/configuring/"
Linting & Static Analysis,Parsing error: Unexpected token,Incorrect parser configuration for TypeScript/modern JavaScript,Set parser to @typescript-eslint/parser in .eslintrc,Configure parserOptions.ecmaVersion and sourceType properly,Implement comprehensive TypeScript ESLint setup with type-aware rules,"npx eslint --debug file.ts 2>&1 | grep parser",Verify files parse without syntax errors,"https://typescript-eslint.io/getting-started/"
Linting & Static Analysis,Definition for rule '*' was not found,Rule conflicts between configuration sources or plugin missing,Remove invalid rules from config or install missing plugin,Use rule override hierarchy to resolve conflicts,Create unified ESLint configuration with proper extends chain,"npx eslint --print-rules | grep rule-name",Ensure all configured rules are available and valid,"https://eslint.org/docs/latest/rules/"
Linting & Static Analysis,File ignored because of matching ignore pattern,File glob patterns excluding intended files,.eslintignore patterns too broad - refine patterns,Use negation patterns (!pattern) to include specific files,Implement granular ignore patterns with file-specific rules,"npx eslint --debug . 2>&1 | grep ignored",Check that intended files are being linted,"https://eslint.org/docs/latest/user-guide/configuring/ignoring-code"
Code Formatting & Style,[prettier/prettier] Code style issues found,Conflicting formatting rules between tools,Disable ESLint formatting rules: extend eslint-config-prettier,Configure .prettierrc with consistent options across team,Implement automated formatting pipeline with pre-commit hooks,"npx prettier --check . && npx eslint --max-warnings 0 .",Verify no conflicts between Prettier and ESLint,"https://prettier.io/docs/en/integrating-with-linters.html"
Code Formatting & Style,Expected indentation of * spaces but found *,EditorConfig settings overriding Prettier,Align .editorconfig indent_size with Prettier tabWidth,Set up consistent IDE settings across team members,Create comprehensive style guide with automated enforcement,"npx prettier --find-config-path file.js",Confirm configuration consistency across tools,"https://prettier.io/docs/en/configuration.html"
Code Formatting & Style,Missing trailing comma,Team members using different formatting configurations,Configure trailingComma: 'es5' in .prettierrc consistently,Implement lint-staged with prettier --write for auto-fixing,Deploy centralized Prettier configuration via shared config package,"npx prettier --check --list-different .",Ensure consistent formatting across all files,"https://prettier.io/docs/en/options.html#trailing-commas"
Code Formatting & Style,Incorrect line ending style,Mixed line ending styles across platforms,Set endOfLine: 'lf' in .prettierrc and configure git autocrlf,Implement .gitattributes with text=auto eol=lf,Use automated formatting with cross-platform CI/CD validation,"git config --get core.autocrlf && npx prettier --check .",Verify consistent line endings across platforms,"https://prettier.io/docs/en/options.html#end-of-line"
Quality Metrics & Measurement,Cyclomatic complexity of * exceeds maximum of *,Large monolithic functions without proper decomposition,Refactor function into smaller focused functions,Extract complex logic into pure functions with single responsibility,Implement architectural patterns (Strategy Command) to reduce complexity,"npx eslint . --format complexity | grep complexity",Measure complexity reduction after refactoring,"https://eslint.org/docs/latest/rules/complexity"
Quality Metrics & Measurement,Function has too many statements (*),Insufficient separation of concerns in function design,Break function into multiple smaller functions,Use composition over large procedural code blocks,Apply clean architecture principles with layered design,"npx eslint . --rule 'max-statements: [error, 10]'",Verify functions stay within statement limits,"https://eslint.org/docs/latest/rules/max-statements"
Quality Metrics & Measurement,Cognitive complexity of * is too high,Nested conditional logic increasing code complexity,Reduce nesting with early returns and guard clauses,Use polymorphism or lookup tables instead of complex conditionals,Implement state machines for complex logical flows,"npx jscpd --threshold 5 . --reporters console",Monitor cognitive complexity trends over time,"https://sonarjs.org/rules/cognitive-complexity"
Quality Metrics & Measurement,Code coverage below threshold (%),Insufficient test coverage for code paths,Write targeted unit tests for uncovered branches,Implement property-based testing for edge cases,Establish coverage requirements in quality gates with incremental improvement,"npx nyc report --reporter=text-summary --check-coverage --lines 80",Achieve and maintain coverage thresholds,"https://docs.sonarsource.com/sonarqube-server/latest/user-guide/code-metrics/"
Security & Vulnerability Scanning,High severity vulnerability found in dependency *,Outdated dependencies with known vulnerabilities,Update vulnerable package: npm update package-name,Use npm audit fix --force for automatic fixes,Implement automated dependency scanning with Snyk or Dependabot,"npm audit --audit-level high --json",Verify all high-severity vulnerabilities resolved,"https://docs.npmjs.com/cli/v8/commands/npm-audit"
Security & Vulnerability Scanning,Potential security hotspot: eval() usage detected,Unsafe coding practices and API usage,Replace eval() with safer alternatives like JSON.parse(),Implement input validation and sanitization,Use Content Security Policy and static analysis for security,"npx eslint . --rule 'no-eval: error'",Ensure no dynamic code execution vulnerabilities,"https://eslint.org/docs/latest/rules/no-eval"
Security & Vulnerability Scanning,SQL injection vulnerability detected,Missing input validation and sanitization,Use parameterized queries instead of string concatenation,Implement ORM with built-in SQL injection protection,Apply defense-in-depth with input validation at multiple layers,"grep -r 'SELECT.*+' . --include='*.js' --include='*.ts'",Verify all database queries use parameterization,"https://owasp.org/www-project-top-ten/"
Security & Vulnerability Scanning,Cross-site scripting (XSS) vulnerability,Inadequate output encoding and input validation,Escape user input before rendering in HTML,Use template engines with auto-escaping enabled,Implement comprehensive input validation and CSP headers,"npx eslint . --rule 'react/no-danger: error'",Ensure all user input is properly sanitized,"https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_%28XSS%29"
CI/CD Integration & Automation,Quality gate failed: * issues found,Missing or misconfigured quality gates,Configure SonarQube quality gate conditions for new code,Set up incremental analysis to focus on changed files,Implement comprehensive quality metrics with team alignment on thresholds,"sonar-scanner -Dsonar.qualitygate.wait=true",Quality gate passes with zero new issues,"https://docs.sonarsource.com/sonarqube-server/latest/instance-administration/analysis-functions/quality-gates/"
CI/CD Integration & Automation,Pre-commit hook failed: linting errors,Inconsistent local vs CI environment setup,Align local development environment with CI configuration,Use exact versions in package-lock.json for tool consistency,Implement containerized development with Docker for environment consistency,"npx husky install && npm run lint",Pre-commit hooks run successfully without errors,"https://typicode.github.io/husky/#/"
CI/CD Integration & Automation,Build failed: code coverage below threshold,Performance issues with quality tools on large codebases,Configure incremental coverage analysis for changed files only,Implement parallel test execution with coverage aggregation,Use distributed analysis with coverage caching strategies,"npm run test:coverage -- --coverage-threshold='{\"global\":{\"lines\":80}}'",Build passes with required coverage levels,"https://jestjs.io/docs/configuration#coveragethreshold-object"
CI/CD Integration & Automation,Commit blocked: formatting issues detected,Inadequate error handling in automation scripts,Fix formatting issues: npx prettier --write . && git add .,Configure IDE to auto-format on save consistently,Implement comprehensive formatting validation with clear error messages,"npx lint-staged --debug",All staged files pass formatting validation,"https://github.com/okonet/lint-staged"
Team Standards & Documentation,Documentation coverage below threshold,Lack of enforced documentation standards,Add JSDoc comments to all public API functions,Configure ESLint rules to require documentation for exports,Implement automated documentation generation with quality metrics,"npx eslint . --rule 'require-jsdoc: error'",All public APIs have proper documentation,"https://github.com/gajus/eslint-plugin-jsdoc"
Team Standards & Documentation,Missing JSDoc comments for public API,Missing automated documentation generation,Use @param @returns @throws tags in JSDoc comments,Set up automated API documentation with TypeDoc or similar,Integrate documentation validation into CI pipeline,"npx typedoc --listInvalidSymbolLinks src/",Documentation builds without missing symbol errors,"https://typedoc.org/"
Team Standards & Documentation,Style guide violations detected,Insufficient team training on quality standards,Provide team training on established coding standards,Create interactive style guide with examples and counter-examples,Implement pair programming and code review processes,"npx eslint . --format stylish | grep violations",Zero style guide violations in new code,"https://google.github.io/styleguide/"
Team Standards & Documentation,Inconsistent naming conventions,No automated validation of naming standards,Implement ESLint naming-convention rules for consistency,Use TypeScript strict naming with interfaces and types,Establish comprehensive naming conventions with automated enforcement,"npx eslint . --rule '@typescript-eslint/naming-convention: error'",All identifiers follow established naming patterns,"https://typescript-eslint.io/rules/naming-convention/"