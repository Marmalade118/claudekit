Category,Symptom/Error,Root Cause,Fix 1,Fix 2,Fix 3,Diagnostic Command,Validation Step,Official Link
Component Optimization,"React DevTools shows excessive re-renders","Missing React.memo optimization","Add React.memo to component","Add custom comparison function","Implement useMemo for expensive calculations","React DevTools Profiler > Record > Check render count","Verify render count decreased in profiler","https://react.dev/reference/react/memo"
Component Optimization,"Child components re-render on parent state change","Props passed as inline objects/functions","Extract objects and functions outside render","Use useCallback for event handlers","Use useMemo for complex object props","React DevTools Profiler > Highlight updates","Confirm child components don't highlight unnecessarily","https://react.dev/reference/react/useCallback"
Component Optimization,"Slow typing in input fields","Expensive calculations in render","Move calculations to useMemo","Debounce input updates","Use useTransition for non-urgent updates","React DevTools Profiler > Record typing","Input should respond within 16ms","https://react.dev/reference/react/useMemo"
Bundle Optimization,"Large initial bundle size (>2MB)","No code splitting implemented","Add React.lazy for route-based splitting","Implement component-level lazy loading","Configure webpack splitChunks optimization","npx webpack-bundle-analyzer build/static/js/*.js","Bundle size reduced by 30%+ on initial load","https://react.dev/reference/react/lazy"
Bundle Optimization,"Slow page load with unused code","Tree-shaking not working properly","Use named imports instead of default","Configure webpack sideEffects: false","Audit and replace heavy dependencies","npm run build && npm run analyze","Dead code eliminated from bundle","https://webpack.js.org/guides/tree-shaking/"
Bundle Optimization,"Third-party libraries bloating bundle","Importing entire libraries unnecessarily","Use specific module imports (e.g., lodash-es)","Replace with lighter alternatives","Implement dynamic imports for heavy features","npx bundle-analyzer build/static/js/*.js","Library size reduced without functionality loss","https://web.dev/reduce-javascript-payloads-with-code-splitting/"
Memory Management,"Memory usage grows over time","Event listeners not cleaned up","Add cleanup in useEffect return","Use AbortController for fetch requests","Implement weak references for caches","Chrome DevTools > Memory tab > Take heap snapshot","Memory usage stabilizes over time","https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development"
Memory Management,"Browser becomes unresponsive with large lists","Rendering thousands of DOM elements","Implement pagination","Use react-window for virtualization","Add intersection observer for lazy rendering","Performance.memory API monitoring","DOM node count remains under 1000","https://react-window.vercel.app/"
Memory Management,"Memory leaks in development mode","Timers and intervals not cleared","Clear timers in useEffect cleanup","Use useRef for mutable values","Implement proper cleanup in custom hooks","React DevTools > Components > Check for stale closures","No memory growth after component unmount","https://react.dev/learn/synchronizing-with-effects#how-to-handle-the-effect-firing-twice-in-development"
Large Data Handling,"Scroll performance is janky","Rendering large lists without optimization","Implement react-window FixedSizeList","Use react-virtualized for complex layouts","Add intersection observer for infinite scroll","Chrome DevTools > Performance > Record scrolling","Maintain 60fps during scroll","https://github.com/bvaughn/react-window"
Large Data Handling,"Table with 1000+ rows is slow","DOM manipulation overhead","Implement virtual scrolling","Use pagination with search/filter","Add row height estimation for performance","React DevTools Profiler > Record table interaction","Render time under 16ms per frame","https://github.com/bvaughn/react-virtualized"
Large Data Handling,"Search/filter causes UI freeze","Synchronous filtering of large datasets","Use debounced input with useMemo","Implement useTransition for filtering","Move filtering to Web Worker","startTransition timing measurement","UI remains responsive during filtering","https://react.dev/reference/react/useTransition"
Core Web Vitals,"Poor Lighthouse performance score (<50)","Missing performance optimizations","Implement image lazy loading","Add resource hints (preconnect, prefetch)","Optimize bundle splitting and caching","npx lighthouse http://localhost:3000","Performance score improves to 90+","https://web.dev/performance-scoring/"
Core Web Vitals,"High Cumulative Layout Shift (CLS >0.1)","Images/content loading without dimensions","Set explicit width/height on images","Reserve space for dynamic content","Use skeleton screens for loading states","Chrome DevTools > Lighthouse > CLS measurement","CLS score under 0.1","https://web.dev/cls/"
Core Web Vitals,"Slow First Contentful Paint (FCP >2s)","Blocking resources and large bundles","Implement critical CSS inlining","Add resource hints for important assets","Use service worker for caching","Chrome DevTools > Performance > FCP timing","FCP under 1.8s","https://web.dev/fcp/"
Asset Optimization,"Images loading slowly","Large unoptimized image files","Implement next/image or similar optimization","Add responsive image sizes","Use modern formats (WebP, AVIF)","Chrome DevTools > Network > Images","Image load time reduced by 50%+","https://nextjs.org/docs/basic-features/image-optimization"
Asset Optimization,"Fonts causing layout shift","Web fonts loading without fallbacks","Add font-display: swap","Preload critical fonts","Use system font fallbacks","Chrome DevTools > Lighthouse > Font display","No visible font loading issues","https://web.dev/font-display/"
Asset Optimization,"Heavy CSS-in-JS performance impact","Runtime CSS generation overhead","Extract static styles to CSS files","Use CSS variables for dynamic values","Implement CSS-in-JS with build-time extraction","React DevTools Profiler > Style recalculation time","Style computation time reduced","https://styled-components.com/docs/advanced#server-side-rendering"
Concurrent Features,"UI feels unresponsive during updates","Heavy computations blocking main thread","Wrap expensive updates in startTransition","Use useDeferredValue for search/filter","Implement time slicing for large operations","React DevTools Profiler > Concurrent features timing","UI remains responsive during updates","https://react.dev/reference/react/useTransition"
Concurrent Features,"Search results update too eagerly","Every keystroke triggers expensive operations","Use useDeferredValue for search query","Implement debouncing with useTransition","Add loading states for deferred updates","Measure time between keypress and UI update","Smooth typing experience maintained","https://react.dev/reference/react/useDeferredValue"
Concurrent Features,"Suspense boundaries causing poor UX","Improper fallback placement and timing","Optimize Suspense boundary placement","Add nested boundaries for granular loading","Implement progressive enhancement patterns","React DevTools > Suspense boundaries visualization","Improved perceived performance","https://react.dev/reference/react/Suspense"
Context Performance,"Context changes cause wide re-renders","Single large context for entire app","Split context into smaller, focused contexts","Use context selectors or state managers","Implement context optimization patterns","React DevTools Profiler > Context provider impact","Only relevant components re-render","https://react.dev/learn/passing-data-deeply-with-context#before-you-use-context"
Context Performance,"Frequent context updates cause lag","Context value recreated on every render","Memoize context value object","Split frequently changing values","Use reducers for complex state logic","React DevTools > Context update frequency","Context updates minimized","https://react.dev/reference/react/useContext"
State Management,"useState causing unnecessary renders","State updates triggering cascade re-renders","Implement state colocation","Use useReducer for complex state","Consider external state managers","React DevTools Profiler > State update impact","Render count reduced significantly","https://react.dev/reference/react/useState"
Animation Performance,"Animations are janky (not 60fps)","CSS animations blocking main thread","Use CSS transforms instead of layout properties","Implement requestAnimationFrame for JS animations","Use libraries optimized for 60fps (Framer Motion)","Chrome DevTools > Performance > FPS counter","Maintain 60fps during animations","https://web.dev/animations-guide/"
Animation Performance,"React Spring/Framer Motion causing drops","Heavy animation libraries with poor configuration","Optimize animation configuration","Use will-change CSS property","Implement GPU-accelerated transforms","Performance.now() timing measurements","Consistent frame timing achieved","https://www.framer.com/motion/animation/#performance"